@startuml
'#########################################
' Классы сущностей (Entities)
'#########################################

class Course {
  - id: int
  - name: string
  - institute: string
  + Course(id: int, name: string, institute: string)
  + getId(): int
  + getName(): string
  + getInstitute(): string
}

class Rating {
  - studentId: int
  - entityId: int
  - value: int
  - isCourse: bool
  + Rating(sid: int, eid: int, val: int, isCourse: bool)
  + getStudentId(): int
  + getEntityId(): int
  + getValue(): int
  + isCourseRating(): bool
}

class Student {
  - id: int
  - surname: string
  - name: string
  - patronymic: string
  - institute: string
  - department: string
  - course: int
  - group: string
  - recordBook: string
  + Student(...)
  + getId(): int
  + getFullName(): string
  + ... другие геттеры ...
}

class Teacher {
  - id: int
  - surname: string
  - name: string
  - patronymic: string
  - institute: string
  - department: string
  + Teacher(...)
  + getId(): int
  + getFullName(): string
  + ... другие геттеры ...
}

'#########################################
' Классы работы с БД (Database)
'#########################################

class Database {
  - db: sqlite3*
  + Statement
  + Transaction
  + getHandle(): sqlite3*
}

class Database::Statement {
  - stmt: sqlite3_stmt*
  + bind(idx: int, value: string|int)
}

class Database::Transaction {
  - db: sqlite3*
  + commit(): void
  + rollback(): void
}

class CourseDB {
  - db: sqlite3*
  + addCourse(c: Course): int
  + getCourse(id: int): Course
  + exists(id: int): bool
  + getAllCourses(): vector<Course>
  + addTeacherToCourse(courseId: int, teacherId: int)
}

class RatingDB {
  - db: sqlite3*
  + addCourseRating(sid: int, cid: int, val: int): bool
  + addTeacherRating(sid: int, tid: int, val: int): bool
  + getAllRatings(): vector<Rating>
  + getStatistics(): Statistics
}

class StudentDB {
  - db: sqlite3*
  + addStudent(s: Student): int
  + exists(recordBook: string): bool
  + getStudentIdByRecordBook(recordBook: string): int
}

class TeacherDB {  
  - db: sqlite3*
  + addTeacher(t: Teacher): int
  + exists(id: int): bool
  + getAllTeachers(): vector<Teacher>
}

class AdminDB {
  - db: sqlite3*
  + addAdmin(username: string): bool
  + checkCredentials(username: string, password: string): bool
}

'#########################################
' UI-Меню
'#########################################

class AdminMenu {
  - db: Database&
  + show()
  + showAllRatings()
  + showStatistics()
  + addCourse() 
  + addTeacher() 
}

class StudentMenu {
  - db: Database&
  - studentId: int
  + show()
  + rateCourse()
  + rateTeacher()  
  + viewRatings()
}

class MainMenu {
  - db: Database&
  + run()
}

'#########################################
' Тестовые классы
'#########################################

class DatabaseTest {
  - db: Database*
  + SetUp()
  + TearDown()
  + StatementBasic()
  + TransactionCommit()
  + TransactionRollback()
}

class AdminDBTest {
  - db: Database*
  - adminDB: AdminDB*
  + TestAddAdmin()
  + TestCredentials()
  + TestDuplicateAdmin()
}

class CourseDBTest {
  - db: Database*
  - courseDB: CourseDB*
  + TestAddCourse()
  + TestGetCourse()
  + TestCourseExists()
}

class RatingDBTest {
  - db: Database*
  - ratingDB: RatingDB*
  + TestAddRating()
  + TestDuplicateRating()
  + TestStatistics()
}

class StudentDBTest {
  - db: Database*
  - studentDB: StudentDB*
  + TestAddStudent()
  + TestStudentExists()
  + TestGetStudentId()
}

class TeacherDBTest {
  - db: Database*
  - teacherDB: TeacherDB*
  + TestAddTeacher()
  + TestGetTeachers()
}

'#########################################
' Связи между классами 
'#########################################

Database::Statement -[hidden]-> Database
Database::Transaction -[hidden]-> Database

DatabaseTest --> Database 
DatabaseTest --> Database::Statement 
DatabaseTest --> Database::Transaction 

AdminDBTest --> AdminDB 
CourseDBTest --> CourseDB 
RatingDBTest --> RatingDB 
StudentDBTest --> StudentDB 
TeacherDBTest --> TeacherDB 

CourseDB --> Database : uses
RatingDB --> Database : uses
StudentDB --> Database : uses
AdminDB --> Database : uses
TeacherDB --> Database : uses  

CourseDB --> Course : creates/manages
RatingDB --> Rating : creates/manages
StudentDB --> Student : creates/manages
TeacherDB --> Teacher : creates/manages  

AdminMenu --> CourseDB : depends
AdminMenu --> RatingDB : depends
AdminMenu --> StudentDB : depends
AdminMenu --> TeacherDB : depends  

StudentMenu --> RatingDB : depends
StudentMenu --> CourseDB : depends
StudentMenu --> TeacherDB : depends  

CourseDB --> TeacherDB : "link teachers"  
RatingDB --> Teacher : "rate" 

MainMenu --> AdminMenu : navigates
MainMenu --> StudentMenu : navigates
@enduml